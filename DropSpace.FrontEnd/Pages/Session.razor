@page "/session/{sessionId}"
@using BlazorBootstrap
@using DropSpace.Contracts.Dtos
@using DropSpace.Contracts.Extensions
@using DropSpace.FrontEnd.Extensions
@using DropSpace.FrontEnd.Utils
@using DropSpace.FrontEnd.Utils.ErrorHandlers
@using DropSpace.FrontEnd.Utils.Interfaces
@using Google.Protobuf
@using Microsoft.AspNetCore.SignalR.Client
@using Contracts.Models
@using Refit
@using System.Collections.Concurrent
@using Uploads
@implements IDisposable
@inject NavigationManager navigation
@inject IHubConnectionProvider hubConnectionProvider
@inject EventTransmitter eventTransmitter 
@inject ISessionService sessionService
@inject IFileService fileService
@inject ErrorHandlerFactory errorHandlerFactory
@inject IJSRuntime JSRuntime
@inject ILogger<Session> logger
@inject IFileTransmissionManager fileTransmissionManager
@if (session == null)
{
    <p class="p-3">Загрузка..</p>
} else
{
    <PageTitle>@session.Name</PageTitle>

    <nav class="navbar navbar-dark w-100 p-3 w-100 bg-dark top-row">
        <div class="navbar-nav w-100 mr-auto flex-row align-items-center justify-content-between">
            <div class="nav-item text-white d-flex align-items-center gap-3" style="cursor: default">
                <div>
                    <span id="memberCount">@membersCount</span>
                    <i class="fa-regular fa-user"></i>
                </div>
                <div class="text-truncate">
                    @session.Name
                </div>
            </div>
            <ul class="gap-4 m-0 d-flex align-items-center">
                <li class="nav-item text-white flex-column align-items-center" style="cursor: default; display: flex;">
                    <div>
                        <span id="session-size">@Math.Round(GetMbFilesSize(), 2)</span> / @session.MaxSizeMb
                        <span class="subtitle" style="letter-spacing: 0px; font-size: 0.7em; margin: 0 0 0 0.5em">MB</span>
                    </div>
                    <div class="subtitle nav-subtitle" style="font-size: 0.7em; letter-spacing: 1px">Максимальный объем</div>
                </li>
                <li class="nav-item text-white flex-column align-items-center justify-content-center" style="cursor: default; display: flex;">
                    <div id="time-counter">@remainingTime.ToString(@"hh\:mm\:ss")</div>
                    <div class="subtitle nav-subtitle" style="font-size: 0.7em; letter-spacing: 1px">Оставшееся время</div>
                </li>
                <li class="nav-item align-items-center justify-content-center d-flex flex-wrap">
                    <i class="fa-solid fa-share btn btn-dark fs-6" id="share-button" data-bs-toggle="modal" data-bs-target="#shareModal"></i>
                    <i class="fa-solid fa-right-from-bracket btn btn-dark fs-6" id="leave-button" @onclick="Leave"></i>
                </li>
            </ul>
        </div>
    </nav>

    <div class="d-flex flex-column flex-grow-1">
        <div class="p-4 d-flex gap-3 flex-wrap container-fluid file-container flex-grow-1 align-items-start">
            <div @onclick="AddFile" class="add-file-button file btn-outline-dark btn d-flex flex-column align-items-center justify-content-center p-2" style="">
                <div class="d-flex w-100 align-items-center justify-content-center" style="flex: 0 0 33%">
                </div>
                <div class="d-flex flex-column w-100 align-items-center justify-content-center" style="flex: 0 0 33%"><i class="fa-regular fa-plus" style="font-size: 6em"></i></div>
                <div class="d-flex w-100 align-items-center justify-content-center" style="flex: 0 0 33%">
                </div>
            </div>
            @foreach (var file in files.Values)
            {
                @if (file.IsUploaded)
                {
                    <div @onclick="() => SelectFile(file.Id)" class="file @(selectedFiles.Contains(file.Id) ? "active" : "") p-2 uploaded-file btn-dark btn d-flex flex-column align-items-center justify-content-center">
                        <div class="d-flex w-100 align-items-center justify-content-center" style="flex: 0 0 33%">
                            <p><span class="sended-size">@file.SizeMb</span> <span class="subtitle" style="font-size: 0.7em; letter-spacing: 1px;">MB</span></p>
                        </div>
                        <div class="d-flex w-100 align-items-center justify-content-center" style="flex: 0 0 33%">
                            <i class="fa-regular fa-file" style="font-size: 6em"></i>
                        </div>
                        <div class="d-flex w-100 align-items-center text-truncate justify-content-center" style="flex: 0 0 33%">
                            @file.FileName
                        </div>
                    </div>
                } else
                {
                    <div class="file p-2 pending-file btn-dark btn d-flex flex-column align-items-center justify-content-center">
                        @if (file.Upload != null)
                        {
                            <div class="d-flex flex-column w-100 align-items-center justify-content-center" style="flex: 0 0 33%">
                                <div class="progress" style="flex: 0 0 15%; width: 75%">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @((int)((file.Upload.SendedSizeMb / file.SizeMb) * 100))%"></div>
                                </div>
                                <p><span class="sended-size">@file.Upload.SendedSizeMb</span> / @file.SizeMb <span class="subtitle" style="font-size: 0.7em; flex: 0 0 85%; letter-spacing: 1px;">MB</span></p>
                            </div>
                        }
                        <div class="spinner-border" role="status" aria-hidden="true"></div>
                        <div class="d-flex w-100 align-items-center text-truncate justify-content-center" style="flex: 0 0 33%">
                            @file.FileName
                        </div>
                    </div>
                }

        }
        </div>
        <div @ref="collapse" class="collapse" id="filesActionsNavbar">
            <div class="bg-white p-4 d-flex align-items-center justify-content-between">
                <h5 class="text-white h4 p-3 bg-dark" style="border-radius: 10px" id="files-counter">@selectedFiles.Count</h5>
                <div class="gap-1 h4 d-flex">
                    <button id="file-download" type="button" class="btn p-3 bg-dark d-flex flex-column align-items-center justify-content-center" style="border-radius: 10px">
                        <i class="file-action-i fa-solid fa-arrow-down"></i>
                    </button>
                    <button @onclick="DeleteFiles" id="file-delete" type="button" class="btn p-3 bg-dark d-flex flex-column align-items-center justify-content-center" style="border-radius: 10px">
                        <i class="file-action-i fa-solid fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="shareModal" tabindex="-1" role="dialog" aria-labelledby="shareModalTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header fs-3">
                    <h5 class="modal-title" id="shareModalTitle">Пригласить участника</h5>
                </div>
                <div class="modal-body">
                    <div class="text-center">
                        <QRCode @ref="qrCodeComponent" />
                    </div>
                    <div id="or" class="text-center my-3"><span>ИЛИ</span></div>
                    <div class="code-input-container my-3" data-button="inviteUser">
                        <input @ref="codeInputs[0]" @onkeyup="(args) => OnCodeKeyPressed(args, 0)" @oninput="(args) => OnCodeInput(args, 0)" class="border code-input form-control" maxlength="1" autocorrect="off" autocomplete="off" autocapitalize="none" spellcheck="false" autofocus="" contenteditable="" placeholder="" />
                        <input @ref="codeInputs[1]" @onkeyup="(args) => OnCodeKeyPressed(args, 1)" @oninput="(args) => OnCodeInput(args, 1)" class="border code-input form-control" maxlength="1" autocorrect="off" autocomplete="off" autocapitalize="none" spellcheck="false" autofocus="" contenteditable="" placeholder="" />
                        <input @ref="codeInputs[2]" @onkeyup="(args) => OnCodeKeyPressed(args, 2)" @oninput="(args) => OnCodeInput(args, 2)" class="border code-input form-control" maxlength="1" autocorrect="off" autocomplete="off" autocapitalize="none" spellcheck="false" autofocus="" contenteditable="" placeholder="" />
                        <input @ref="codeInputs[3]" @onkeyup="(args) => OnCodeKeyPressed(args, 3)" @oninput="(args) => OnCodeInput(args, 3)" class="border code-input form-control" maxlength="1" autocorrect="off" autocomplete="off" autocapitalize="none" spellcheck="false" autofocus="" contenteditable="" placeholder="" />
                        <input @ref="codeInputs[4]" @onkeyup="(args) => OnCodeKeyPressed(args, 4)" @oninput="(args) => OnCodeInput(args, 4)" class="border code-input form-control" maxlength="1" autocorrect="off" autocomplete="off" autocapitalize="none" spellcheck="false" autofocus="" contenteditable="" placeholder="" />
                    </div>
                    <p class="my-3 text-center subtitle" style="letter-spacing: normal">Чтобы войти с другого устройства отсканируйте QR-код или введите комбинацию символов, указанную на главной странице приглашаемого устройства.</p>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Отмена</button>
                        <button @ref="sendButton" @onclick="Invite" id="inviteUser" type="button" class="btn btn-outline-primary" disabled>Отправить</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <InputFile @ref="fileInput" Mult OnChange="FileUploaded"/>
}

@code {
    [Parameter]
    public string sessionId { get; set; }

    private InputFile fileInput;

    private Timer remainingTimer;

    private ConcurrentDictionary<Guid, FileModelDto> files = [];

    private ElementReference[] codeInputs = new ElementReference[5];

    private ElementReference sendButton;

    private HubConnection hubConnection;

    private int membersCount = 1;

    private TimeSpan remainingTime;

    private SessionDto? session;

    private QRCode qrCodeComponent;

    private List<Guid> selectedFiles = [];

    private ElementReference collapse;

    private bool performingDeletion = false;

    public void Dispose()
    {
        files = [];

        if (remainingTimer != null)
            remainingTimer.Dispose();

        if (hubConnection != null)
        {
            hubConnection.Remove("UserLeft");

            hubConnection.Remove("UserJoined");

            hubConnection.Remove("FileDeleted");
        }

        session = null;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!Guid.TryParse(sessionId, out var id))
            navigation.NavigateTo("/");

        Dispose();

        try
        {
            session = await sessionService.Get(id);

            var filesList = await fileService.GetAll(id);

            foreach (var file in filesList)
            {
                files[file.Id] = file; 
            }

            await eventTransmitter.InvokeAsync("NewSession", session);

            membersCount = session.MembersCount;

            StateHasChanged();
        }
        catch (ApiException ex)
        {

            if (ex.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errors = ex.Content.ParseErrors().Values;

                await errorHandlerFactory.MessageError.HandleAsync(errors.First().First());
            }

            if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await errorHandlerFactory.MessageError.HandleAsync("Сессия исчерпана или не существует!");
            }

            await OnSessionRemoved();
        }

        qrCodeComponent.GenerateQRCode(navigation.Uri);

        remainingTimer = CreateTimer();

        await RegisterHubConnectionWithHandlers();
    }

    private Timer CreateTimer()
    {
        return new Timer(async (state) =>
        {
            remainingTime = session.Expired - DateTime.UtcNow;
            StateHasChanged();
            if (remainingTime.TotalSeconds <= 0)
            {
                remainingTimer.Dispose();

                await OnSessionRemoved();
            }
        }, null, 0, 1000);
    }

    private async Task RegisterHubConnectionWithHandlers()
    {
        if (hubConnection == null)
            hubConnection = await hubConnectionProvider.GetOrCreateConnection("SessionNotification");

        hubConnection.On("UserLeft", async (int membersCount) =>
        {
            this.membersCount = membersCount;

            StateHasChanged();

            await eventTransmitter.InvokeAsync<ToastMessage>("ShowToast", new()
                {
                    AutoHide = true,
                    Type = ToastType.Primary,
                    Message = "Пользователь вышел из сессии"
                });
        });

        hubConnection.On("UserJoined", async (int membersCount) =>
        {
            this.membersCount = membersCount;

            await eventTransmitter.InvokeAsync<ToastMessage>("ShowToast", new()
                {
                    AutoHide = true,
                    Type = ToastType.Primary,
                    Message = "К сессии присоединился новый пользователь"
                });

            StateHasChanged();
        });

        hubConnection.On("FileUpdated", (FileModelDto file) =>
        {
            files.AddOrUpdate(file.Id, file, (_, _) =>
            {
                return file;
            });

            StateHasChanged();
        });

        hubConnection.On("FileDeleted", (Guid fileId) =>
        {
            if (files.Remove(fileId, out _))
                StateHasChanged();
        });
    }

    private async Task FileUploaded(InputFileChangeEventArgs args)
    {
        var file = args.File;

        var size = GetFilesSize();

        if (size + file.Size > session!.MaxSize)
        {
            await errorHandlerFactory.MessageError.HandleAsync("Файл слишком велик!");

            return;
        }

        var fileStream = file.OpenReadStream(file.Size);

        fileTransmissionManager.UploadFile(
            new UploadRequest()
            {
                FileName = file.Name,
                SessionId = sessionId,
                Size = file.Size
            },
            fileStream,
            (fileModel) =>
            {
                files.AddOrUpdate(fileModel.Id, fileModel, (_, _) =>
                {
                    return fileModel;
                });

                StateHasChanged();
            }
        );
    }

    private long GetFilesSize()
    {
        return files.Values.Sum(file => file.Size);
    }

    private double GetMbFilesSize()
    {
        return files.Values.Sum(file => file.SizeMb);
    }

    private async Task OnCodeInput(ChangeEventArgs e, int id)
    {
        await JSRuntime.InvokeVoidAsync("inputCode", codeInputs[id], codeInputs, id, sendButton);
    }

    private async Task Invite()
    {
        var code = await JSRuntime.InvokeAsync<string>("collectCode", codeInputs);

        if (code.Length != 5)
        {
            return;
        }

        try
        {
            await hubConnection.InvokeAsync("SendInviteByCode", code, session.Id);
        } catch (Exception ex)
        {
            await errorHandlerFactory.HubError.HandleAsync(ex.Message);
        }

        await eventTransmitter.InvokeAsync("ShowToast", new ToastMessage()
        {
            Type = ToastType.Success,
            AutoHide = true,
            Message = "Сообщение успешно отправлено!"
        });
    }

    private async Task OnCodeKeyPressed(KeyboardEventArgs e, int id)
    {
        switch (e.Key)
        {
            case "Backspace":
                if (id >= 1)
                {
                    await codeInputs[id - 1].FocusAsync();
                }
                break;
            case "ArrowRight":
                if (id < codeInputs.Length - 1)
                {
                    await codeInputs[id + 1].FocusAsync();
                }
                break;
            case "ArrowLeft":
                if (id >= 1)
                {
                    await codeInputs[id - 1].FocusAsync();
                }
                break;
            default:
                break;
        }
    }

    private async Task Leave()
    {
        if (session == null)
        {
            return;
        }
        await sessionService.Leave(session.Id);

        await OnSessionRemoved();
    }

    private async Task OnSessionRemoved()
    {
        if (session != null)
            await eventTransmitter.InvokeAsync<Guid>("SessionRemoved", session.Id);

        navigation.NavigateTo("/");
    }

    private async Task AddFile(MouseEventArgs e)
    {
        if (fileInput.Element != null)
            await JSRuntime.InvokeVoidAsync("click", fileInput.Element);
    }
    private async Task SelectFile(Guid fileId)
    {
        if (performingDeletion)
        {
            await errorHandlerFactory.MessageError.HandleAsync("Подождите, удаление уже выполняется..");

            return;
        }

        if (selectedFiles.Any(f => f == fileId))
        {
            selectedFiles.Remove(fileId);
            if (selectedFiles.Count == 0)
            {
                await HideFileActions();
            }
        } else
        {
            selectedFiles.Add(fileId);
            if (selectedFiles.Count == 1)
            {
                await ShowFileActions();
            }
        }

        StateHasChanged();
    }

    private async Task ShowFileActions()
    {
        await JSRuntime.InvokeVoidAsync("showCollapse", collapse);
    }

    private async Task HideFileActions()
    {
        await JSRuntime.InvokeVoidAsync("hideCollapse", collapse);
    }

    private async Task DeleteFiles()
    {
        try
        {
            if (performingDeletion)
            {
                await errorHandlerFactory.MessageError.HandleAsync("Подождите, удаление уже выполняется..");

                return;
            }
            else
            {
                performingDeletion = true;
            }

            foreach (var fileId in selectedFiles)
            {
                await fileService.Delete(new DeleteFileModel() { FileId = fileId, SessionId = session!.Id });
            }

            selectedFiles = [];

            await HideFileActions();

            StateHasChanged();
        } finally
        {
            performingDeletion = false;
        }
    }
}